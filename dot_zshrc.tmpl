source ~/.zplug/init.zsh

zplug "romkatv/powerlevel10k", as:theme, depth:1
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "plugins/git",   from:oh-my-zsh
zplug "zsh-users/zsh-autosuggestions"
zplug "plugins/command-not-found", from:oh-my-zsh
zplug "plugins/docker", from:oh-my-zsh
zplug "agkozak/zsh-z"
zplug 'zplug/zplug', hook-build:'zplug --self-manage'


# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
        zplug install
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Support SSH auth through GPG
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

export GEM_HOME="$HOME/gems"
export PATH="$HOME/gems/bin:$PATH"
export BROWSER="/mnt/c/Users/Baptiste/AppData/Local/Programs/Opera GX/launcher.exe"
export PATH="/usr/local/cuda/bin:$PATH"
#export PATH="$HOME/.local/bin:$PATH"

{{ if eq .chezmoi.hostname "OSE_BMAINGRET" }}
hash -d ncloud=/mnt/c/Users/Baptiste/Nextcloud
{{ else if eq .chezmoi.hostname "HOME-BMAINGRET" }}
hash -d download=/mnt/c/Users/Baptiste\ Maingret/Downloads
{{ else }}
{{ end }}

alias c="code ."
alias ll="exa -la"
alias chedit="chezmoi edit"
alias chupdate="chezmoi update"
alias chapply="chezmoi apply&exec $SHELL"
alias jlab="jupyter lab&"

bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory


# Then, source plugins and add commands to $PATH
zplug load

# Configure ssh forwarding
export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
# need `ps -ww` to get non-truncated command for matching
# use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
if [[ $ALREADY_RUNNING != "0" ]]; then
    if [[ -S $SSH_AUTH_SOCK ]]; then
        # not expecting the socket to exist as the forwarding command isn't running (http://www.tldp.org/LDP/abs/html/fto.html)
        rm $SSH_AUTH_SOCK
    fi
    # setsid to force new session to keep running
    # set socat to listen on $SSH_AUTH_SOCK and forward to npiperelay which then forwards to openssh-ssh-agent on windows
    (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
fi

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
